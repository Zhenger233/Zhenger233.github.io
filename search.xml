<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/10/26/test/</url>
    <content><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>hello？hello？</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>有界DFS解决八数码问题</title>
    <url>/2020/11/06/%E6%9C%89%E7%95%8CDFS%E8%A7%A3%E5%86%B3%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="一、问题概述"><a href="#一、问题概述" class="headerlink" title="一、问题概述"></a>一、问题概述</h2><p>九宫格中有 0 到 8 共9个数字，给定一个初始状态，需要得到目标状态，每次操作只能交换0和其周围的数字。</p>
<p>本题中初始状态为 280163754，目标状态为 123804765，即如下图所示</p>
<p><img src="https://s1.ax1x.com/2020/11/06/BfPuUH.png" alt="img"></p>
<h2 id="二、相关概念"><a href="#二、相关概念" class="headerlink" title="二、相关概念"></a>二、相关概念</h2><p>树：节点和节点由边连接成的不含回路的结构</p>
<p>深度优先搜索：遍历一棵树时优先扩展深度</p>
<p>有界深度优先搜索：扩展深度至某一值后不再继续向下扩展，而是返回</p>
<h2 id="三、伪代码"><a href="#三、伪代码" class="headerlink" title="三、伪代码"></a>三、伪代码</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">dfs(root,depth):</span><br><span class="line">	 if endflag </span><br><span class="line">	 	end</span><br><span class="line">	 root.exists = true</span><br><span class="line">	 if root = endnode</span><br><span class="line">	 	endflag = true</span><br><span class="line">	 	end</span><br><span class="line">	 if depth = maxdepth</span><br><span class="line">	 	end</span><br><span class="line">	 for node in root.childs</span><br><span class="line">	 	if node.exists</span><br><span class="line">	 		dfs(node,depth+1)</span><br></pre></td></tr></table></figure>

<h2 id="四、实现"><a href="#四、实现" class="headerlink" title="四、实现"></a>四、实现</h2><h3 id="1-需要实现的东西"><a href="#1-需要实现的东西" class="headerlink" title="1. 需要实现的东西"></a>1. 需要实现的东西</h3><p>地图的存储结构、node.exists、node.childs、dfs函数</p>
<h3 id="2-地图表示的选择"><a href="#2-地图表示的选择" class="headerlink" title="2. 地图表示的选择"></a>2. 地图表示的选择</h3><p>方案一：{ int[9], int exists } </p>
<p>方案二：int</p>
<p>方案一在实现的过程中，需要写自定义类、写整数构造函数、数组构造函数、拷贝构造函数、重载==、!=、&lt;、&lt;&lt;等运算符，非常容易写炸(实际就是写炸了)，虽然有可扩展地图大小的优点，但是仍然不予考虑。</p>
<p>方案二用一个 int 表示地图，int 的范围在21亿，10位数，因此恰好用每一个十进制位表示对应位置上的数字。int 自带赋值和比较运算符，需要重载&lt;&lt;时直接写函数即可，非常方便。</p>
<h3 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3.具体实现"></a>3.具体实现</h3><a id="more"></a>

<h4 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> beginNumber = <span class="number">280163754</span>, <span class="comment">//homework 280163754, sample 283104765</span></span><br><span class="line">    endNumber = <span class="number">123804765</span>;</span><br></pre></td></tr></table></figure>

<h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; exists;</span><br></pre></td></tr></table></figure>

<p>如果使用自定义类作为 map 的 key 需要重载 &lt; 运算符</p>
<h4 id="childs"><a href="#childs" class="headerlink" title="childs"></a>childs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nxtDirection</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAPSIZE - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tempNumber = i + allDirection[j];</span><br><span class="line">                <span class="keyword">if</span> (tempNumber &lt; MAPSIZE &amp;&amp; tempNumber &gt;= <span class="number">0</span> &amp;&amp; isValidDirection(i, allDirection[j]))</span><br><span class="line">                    c.push_back(allDirection[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidDirection</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span> || k == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">-1</span> || k == <span class="number">1</span> || k == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">-1</span> || k == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span> || k == <span class="number">3</span> || k == <span class="number">-3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span> || k == <span class="number">3</span> || k == <span class="number">-1</span> || k == <span class="number">-3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">-1</span> || k == <span class="number">3</span> || k == <span class="number">-3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span> || k == <span class="number">-3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span> || k == <span class="number">-3</span> || k == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">-1</span> || k == <span class="number">-3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nxtMap</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1[MAPSIZE], b = <span class="number">0</span>, t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">8</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        t1[i] = m % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (t1[i] == <span class="number">0</span>)</span><br><span class="line">            b = i;</span><br><span class="line">        m /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    t = t1[b];</span><br><span class="line">    t1[b] = t1[b + k];</span><br><span class="line">    t1[b + k] = t;</span><br><span class="line">    <span class="keyword">int</span> mm = t1[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAPSIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm = mm * <span class="number">10</span> + t1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> layer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (over)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (showStep)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\ttotal: %5d\tlayer: %4d\n&quot;</span>, (<span class="keyword">int</span>)exists.size(), layer);</span><br><span class="line">        showMap(m);</span><br><span class="line">    &#125;</span><br><span class="line">    exists[m] = <span class="literal">true</span>;</span><br><span class="line">    layers[layer].push_back(m);</span><br><span class="line">    <span class="keyword">if</span> (m == endNumber)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (showStep)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">        over = (<span class="keyword">int</span>)exists.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (layer == maxDepth || m == endNumber)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c = nxtDirection(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tempMap = nxtMap(m, i);</span><br><span class="line">        <span class="keyword">if</span> (!exists[tempMap])</span><br><span class="line">            dfs(tempMap, layer + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>定义最大深度、四个方向常量数组、地图大小(fake)、结束标志</p>
<p>适当的地方加输出查看搜索步骤以及提示信息</p>
<h2 id="五、效果"><a href="#五、效果" class="headerlink" title="五、效果"></a>五、效果</h2><p><img src="https://s1.ax1x.com/2020/11/06/BWXfPK.png" alt="img"></p>
<p>修改搜索方向和最大深度后需要的步数：</p>
<p><img src="https://s1.ax1x.com/2020/11/06/BWjlIx.jpg" alt="img"></p>
<h2 id="六、代码地址"><a href="#六、代码地址" class="headerlink" title="六、代码地址"></a>六、代码地址</h2><p><a href="https://paste.ubuntu.com/p/n66xkGBB9n/">https://paste.ubuntu.com/p/n66xkGBB9n/</a></p>
]]></content>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
</search>
